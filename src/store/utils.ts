export const transformTariffs = (mockData: any) => {
    if (!mockData || typeof mockData !== 'object') {
        console.error('Invalid data format:', mockData);
        return { forever: [], notForever: [] };
    }

    const result = {
        forever: [] as any[],
        notForever: [] as any[]
    };


    const calculateDiscountPercentage = (originalPrice: number, discountPrice: number): number => {
        if (!originalPrice || !discountPrice || originalPrice <= discountPrice) {
            return 0;
        }
        return Math.round(((originalPrice - discountPrice) / originalPrice) * 100);
    };

    const getTariffText = (type: string): string => {
        switch (type) {
            case '1 –Ω–µ–¥–µ–ª—è':
                return '–ß—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∞—Ç—å üëçüèª';
            case '1 –º–µ—Å—è—Ü':
                return '–ü—Ä–∏–≤–µ—Å—Ç–∏ —Ç–µ–ª–æ –≤–ø–æ—Ä—è–¥–æ–∫ üí™üèª';
            case '3 –º–µ—Å—è—Ü–∞':
                return '–ò–∑–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ üî•';
            case '–Ω–∞–≤—Å–µ–≥–¥–∞':
                return '–í—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ ‚≠êÔ∏è';
            default:
                return '';
        }
    };

    Object.entries(mockData).forEach(([ownerId, tariffsData]) => {
        if (!tariffsData || typeof tariffsData !== 'object') {
            return;
        }

        Object.entries(tariffsData as { [key: string]: any[] }).forEach(([tariffId, items]) => {
            if (!Array.isArray(items) || items.length === 0) {
                return;
            }

            const firstItem = items[0];
            if (!firstItem?.name) {
                return;
            }

            const name = firstItem.name.toLowerCase();

            if (name.includes('–Ω–∞–≤—Å–µ–≥–¥–∞') || name.includes('forever')) {
                const transformed: any = {
                    type: '–Ω–∞–≤—Å–µ–≥–¥–∞',
                    id: tariffId,
                    text: getTariffText('–Ω–∞–≤—Å–µ–≥–¥–∞') // –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                };

                items.forEach(item => {
                    if (item.isDiscount === true) {
                        transformed.foreverDiscountPrice = item.price;
                    } else if (item.isDiscount === false) {
                        transformed.foreverPrice = item.price;
                    }
                });

                if (transformed.foreverPrice && transformed.foreverDiscountPrice) {
                    transformed.discountPercentage = calculateDiscountPercentage(
                        transformed.foreverPrice,
                        transformed.foreverDiscountPrice
                    );
                }

                result.forever.push(transformed);
            }
            else {
                let type = '';
                if (name.includes('–Ω–µ–¥–µ–ª') || name.includes('week')) {
                    type = '1 –Ω–µ–¥–µ–ª—è';
                } else if (name.includes('1 –º–µ—Å—è—Ü') || name.includes('1 month')) {
                    type = '1 –º–µ—Å—è—Ü';
                } else if (name.includes('3 –º–µ—Å—è—Ü') || name.includes('3 month')) {
                    type = '3 –º–µ—Å—è—Ü–∞';
                } else {
                    console.warn('Unknown tariff name:', firstItem.name);
                    return;
                }

                const transformed: any = {
                    type,
                    id: tariffId,
                    text: getTariffText(type)
                };

                items.forEach(item => {
                    if (item.isPopular === false && item.isDiscount === true) {
                        transformed.discountMinPrice = item.price;
                    } else if (item.isPopular === true && item.isDiscount === false) {
                        transformed.discountPrice = item.price;
                    } else if (item.isPopular === true && item.isDiscount === true) {
                        transformed.price = item.price;
                    }
                });

                // –†–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ (–º–µ–∂–¥—É discountPrice –∏ price)
                if (transformed.price && transformed.discountPrice) {
                    transformed.discountPercentage = calculateDiscountPercentage(
                        transformed.price,
                        transformed.discountPrice
                    );
                }

                result.notForever.push(transformed);
            }
        });
    });

    return result;
};